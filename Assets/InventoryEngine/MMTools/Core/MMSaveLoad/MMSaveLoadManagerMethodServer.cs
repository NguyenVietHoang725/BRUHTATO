using UnityEngine;
using UnityEngine.Networking;
using System;
using System.Collections;
using System.IO;
using System.Threading.Tasks;

namespace MoreMountains.Tools
{
    public class MMSaveLoadManagerMethodServer : IMMSaveLoadManagerMethod
    {
        private string serverUrl = "http://localhost:3000/api/inventory";
        
        [System.Serializable]
        public class ServerSaveFormat
        {
            public string name;
            public string data; // Chu·ªói JSON th·ª±c t·∫ø
        }


        // ‚úÖ L∆∞u d·ªØ li·ªáu l√™n server
        public void Save(object objectToSave, FileStream fileStream)
        {
            string fileName = Path.GetFileNameWithoutExtension(fileStream.Name);
            MonoBehaviourHelper.Instance.StartCoroutine(SaveToServer(objectToSave, fileName));
        }

        // G·ª≠i d·ªØ li·ªáu l√™n server
        private IEnumerator SaveToServer(object objectToSave, string fileName)
        {
            // T·∫°o JSON v·ªõi c·∫•u tr√∫c y√™u c·∫ßu
            string jsonData = $"{{\"name\": \"{fileName}\", \"data\": {JsonUtility.ToJson(objectToSave)}}}";
            Debug.Log($"üìÇ D·ªØ li·ªáu chu·∫©n b·ªã l∆∞u: {jsonData}");

            UnityWebRequest request = new UnityWebRequest(serverUrl + "/save", "POST");
            byte[] bodyRaw = System.Text.Encoding.UTF8.GetBytes(jsonData);
            request.uploadHandler = new UploadHandlerRaw(bodyRaw);
            request.downloadHandler = new DownloadHandlerBuffer();
            request.SetRequestHeader("Content-Type", "application/json");

            yield return request.SendWebRequest();

            if (request.result == UnityWebRequest.Result.Success)
            {
                Debug.Log($"‚úÖ L∆∞u d·ªØ li·ªáu l√™n server th√†nh c√¥ng! URL: {serverUrl}/save");
                Debug.Log($"üìÇ File ƒë√£ l∆∞u: {fileName}");
                Debug.Log($"üìÇ D·ªØ li·ªáu ƒë√£ l∆∞u: {jsonData}");
                Debug.Log($"üì© Ph·∫£n h·ªìi t·ª´ server: {request.downloadHandler.text}");
            }
            else
            {
                Debug.LogError($"‚ùå L·ªói khi l∆∞u l√™n server ({serverUrl}/save): {request.error}");
            }
        }
        
        public object Load(Type objectType, FileStream fileStream)
        {
            object result = null;
            MonoBehaviourHelper.Instance.StartCoroutine(LoadFromServer(objectType, fileStream, (loadedObject) => 
            {
                result = loadedObject;
            }));

            return result; // Gi√° tr·ªã ban ƒë·∫ßu l√† null, v√¨ Coroutine ch·∫°y b·∫•t ƒë·ªìng b·ªô
        }


        private IEnumerator LoadFromServer(Type objectType, FileStream fileStream, Action<object> callback)
        {
            string fileName = Path.GetFileNameWithoutExtension(fileStream.Name);
            string requestUrl = $"http://localhost:3000/api/inventory/load?name={fileName}";

            using (UnityWebRequest request = UnityWebRequest.Get(requestUrl))
            {
                yield return request.SendWebRequest();

                if (request.result == UnityWebRequest.Result.Success)
                {
                    string json = request.downloadHandler.text;
                    Debug.Log($"‚úÖ Ph·∫£n h·ªìi t·ª´ server: {json}");
                    object loadedObject = JsonUtility.FromJson(json, objectType);
                    Debug.Log($"üéØ ƒê√£ parse th√†nh c√¥ng: {loadedObject}");
                    callback?.Invoke(loadedObject);
                }
                else
                {
                    Debug.LogError($"‚ùå L·ªói t·∫£i file t·ª´ server: {request.error}");
                    callback?.Invoke(null);
                }
            }
        }


    }
}
